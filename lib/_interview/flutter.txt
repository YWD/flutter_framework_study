/// lifecycle

// widget.createElement -> element.mount -> state.initState
initState

// 1.After state.initState
// 2.Some widget may use .of(context) to use InheritedWidget's value, this can cause the InheritedWidget
// corresponding InheritedElement save the widget corresponding element in it's _dependents, when
// the InheritedWidget get rebuild (it's parent widget corresponding state's setState get called) it
// will update it's _dependents
didChangeDependencies

// reuse widget
// when element update it's child if the child 'canUpdate' it will invoke child's 'update' method to invoke
// child element's state's didUpdateWidget
didUpdateWidget

// first init
// setState -> element.markNeedsBuild -> buildOwner.onBuildSchedule -> widgetsBinding._handleBuildScheduled
// -> schedulerBinding.scheduleFrame -> schedulerBinding._handleBeginFrame ----> @callbacks
build

// rebuild all element by invoke markNeedsBuild for all subtree node.
// this method will only invoked during debugging, for example during hot reload
reassemble

// when rebuild the parent is going to update child, it find it's child doesn't exists anymore
// the parent will 'deactivateChild' by invoke in owner!._inactiveElements.add method, this will
// _deactivateRecursively
deactivate

// after drawFrame buildOwner will finalizeTree
// _unmountAll _inactiveElements
dispose // setState() called after dispose

/// callbacks
SchedulerPhase {
    idle,

    // SchedulerBinding.scheduleFrameCallback
    transientCallbacks,     // for animate

    midFrameMicrotasks,     // for future.then

    // SchedulerBinding.addPersistentFrameCallback
    persistentCallbacks,    // WidgetsBinding.drawFrame() for build(buildOwner)/layout-paint(pipelineOwner)

    // SchedulerBinding.addPostFrameCallback
    postFrameCallbacks,
}

/// window
devicePixelRatio,
locale,
onPlatformMessage,
onBeginFrame,
onDrawFrame,
render,

/// bindings
GestureBinding,     // gesture
SchedulerBinding,   // schedule frame
ServicesBinding,    // message channel
PaintingBinding,    // image cache
SemanticsBinding,   // accessibility
RendererBinding,    // renderView           pipelineOwner.flushLayout/flushCompositingBits/flushPaint
WidgetsBinding      //                      buildOwner.buildScope -> _dirtyElements.rebuild

/// flutter launch process
widget tree imprecisely / element tree (parent) / RenderObject tree (child)
runApp -> ..ensureInitialize -> RenderObjectToWidgetAdapter -> RenderObjectToWidgetElement(_renderViewElement) -> RenderView(renderView)
..scheduleWarmUpFrame

StatefulWidget          element(parent).inflateWidget -> widget.createElement -> state - element.mount parent _updateInheritance -> _firstBuild - state.initState-didChangeDependencies -> rebuild -> performRebuild -> state.build -> updateChild -> inflateWidget
StatelessWidget         element(parent).inflateWidget -> widget.createElement -> element.mount parent -> _firstBuild -widget.build -> updateChild -> inflateWidget
InheritedWidget         element(parent).inflateWidget -> widget.createElement -> element.mount parent _updateInheritance -> _firstBuild -> rebuild -> performRebuild -> widget.child -> updateChild -> inflateWidget
RenderObjectWidget      element(parent).inflateWidget -> widget.createElement -> element.mount parent widget.createRenderObject element.attachRenderObject(parent.child parent._firstChild/_lastChild(parentData) -> (updateChild) -> inflateWidget


/// setState
setState -> element.markNeedsBuild -> buildOwner.scheduleBuildFor * -> onBuildScheduled
-> widgetsBinding._handleBuildScheduled -> schedulerBing.ensureVisualUpdate -> scheduleFrame
-> window.scheduleFrame -> * add to _dirtyElements

/// about VSync
Display pulse
jank / double buffering / triple buffering
scheduleFrame -> window.scheduleFrame ----> VSync -> schedulerBinding._handleBeginFrame -> @ scheduleCallbacks

/// animation

/// layout
constraints flow down, size flow up
pipelineOwner.flushLayout -> dirtyNodes(renderObject)._layoutWithoutResize -> (renderObject.)performLayout -> child.layout/performResize/performLayout
Container()
Center(Container())     layout -> size -> childParentData.offset

/// paint
repaintBoundary
markNeedsCompositingBitsUpdate
flushCompositingBits -> node._updateCompositingBits

/// navigator































